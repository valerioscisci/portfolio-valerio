import React, { useCallback, useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { useTranslation } from 'react-i18next';
import { TechList } from './TechList';
import { observer } from 'mobx-react';
import { useStores } from '../hooks/useStores';
import { ProjectsShow } from './ProjectsShow';
import { portfolioProject } from '../types';

export interface KnowsTechSectionProps {}

export const KnownTechSection: React.FC<KnowsTechSectionProps> = observer(
  ({}) => {
    const { home } = useStores();
    const { t } = useTranslation();
    const [selectedTech, setSelectedTech] = useState<string>('');

    const onTechChange = useCallback(
      (newTech: string) => {
        setSelectedTech(newTech);
      },
      [setSelectedTech],
    );

    const projectsDoneWithTechX: Array<portfolioProject> = home.portfolioImages.filter(
      (portfolioImage) => {
        return portfolioImage.madeWith.includes(selectedTech);
      },
    );

    return (
      <>
        <SectionHeading>{t(`knownTechs.heading`)}</SectionHeading>{' '}
        <TechName key={selectedTech}>
          <em>{selectedTech}</em>
        </TechName>
        <SectionSeparator />
        <Section>
          <SideMenu>
            <TechList onTechChange={onTechChange} />
          </SideMenu>
          {!!projectsDoneWithTechX.length ? (
            <ProjectsShow key={selectedTech} projects={projectsDoneWithTechX} />
          ) : (
            <ProjectsShow
              key={selectedTech}
              noProjects={true}
              projects={[
                {
                  alt: t('knownTechs.noProjects'),
                  img: require('../assets/images/portfolio/no_projects.svg'),
                  madeWith: [selectedTech],
                },
              ]}
            />
          )}
        </Section>
      </>
    );
  },
);

const Section = styled.section`
  width: 100%;
  min-height: 30em;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-content: center;
  justify-content: space-between;
`;

const SideMenu = styled.div`
  height: 100%;
  width: 20%;
`;

const SectionHeading = styled.h1`
  color: ${(props) => props.theme.colors.textColorBlack};
  font-family: Corben;
  text-transform: uppercase;
  padding: 0.2em 0;
  text-align: center;
  margin-top: 4em;
  margin-bottom: 0;
`;

const TechName = styled.div`
  /* ----------------------------------------------
* Generated by Animista on 2020-12-29 22:25:54
* Licensed under FreeBSD License.
* See http://animista.net/license for more info. 
* w: http://animista.net, t: @cssanimista
* ---------------------------------------------- */

  /**
* ----------------------------------------
* animation jello-horizontal
* ----------------------------------------
*/
  @-webkit-keyframes jello-horizontal {
    0% {
      -webkit-transform: scale3d(1, 1, 1);
      transform: scale3d(1, 1, 1);
    }
    30% {
      -webkit-transform: scale3d(1.25, 0.75, 1);
      transform: scale3d(1.25, 0.75, 1);
    }
    40% {
      -webkit-transform: scale3d(0.75, 1.25, 1);
      transform: scale3d(0.75, 1.25, 1);
    }
    50% {
      -webkit-transform: scale3d(1.15, 0.85, 1);
      transform: scale3d(1.15, 0.85, 1);
    }
    65% {
      -webkit-transform: scale3d(0.95, 1.05, 1);
      transform: scale3d(0.95, 1.05, 1);
    }
    75% {
      -webkit-transform: scale3d(1.05, 0.95, 1);
      transform: scale3d(1.05, 0.95, 1);
    }
    100% {
      -webkit-transform: scale3d(1, 1, 1);
      transform: scale3d(1, 1, 1);
    }
  }
  @keyframes jello-horizontal {
    0% {
      -webkit-transform: scale3d(1, 1, 1);
      transform: scale3d(1, 1, 1);
    }
    30% {
      -webkit-transform: scale3d(1.25, 0.75, 1);
      transform: scale3d(1.25, 0.75, 1);
    }
    40% {
      -webkit-transform: scale3d(0.75, 1.25, 1);
      transform: scale3d(0.75, 1.25, 1);
    }
    50% {
      -webkit-transform: scale3d(1.15, 0.85, 1);
      transform: scale3d(1.15, 0.85, 1);
    }
    65% {
      -webkit-transform: scale3d(0.95, 1.05, 1);
      transform: scale3d(0.95, 1.05, 1);
    }
    75% {
      -webkit-transform: scale3d(1.05, 0.95, 1);
      transform: scale3d(1.05, 0.95, 1);
    }
    100% {
      -webkit-transform: scale3d(1, 1, 1);
      transform: scale3d(1, 1, 1);
    }
  }

  -webkit-animation: jello-horizontal 0.5s both;
  animation: jello-horizontal 0.5s both;

  color: ${(props) => props.theme.colors.secondary};
  text-shadow: -1px -1px 1px rgba(255, 255, 255, 0.1),
    1px 1px 1px rgba(0, 0, 0, 0.1);

  font-family: Corben;
  text-transform: uppercase;
  font-size: 2em;
  margin-top: -0.5em;
`;

const SectionSeparator = styled.hr`
  width: 100%;
  border: 0;
  height: 1px;
  background-image: linear-gradient(
    to right,
    rgba(0, 0, 0, 0),
    rgba(0, 0, 0, 0.75),
    rgba(0, 0, 0, 0)
  );
`;
