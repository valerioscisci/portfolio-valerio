import React, { useState } from 'react';
import styled, { css } from 'styled-components';
import VisibilitySensor from 'react-visibility-sensor';

export interface SlidingImageProps {
  image: { default: string };
  imageAlt: string;
  imageStyle?: React.CSSProperties | undefined;
  animationDirection: 'RightToLeft' | 'LeftToRight' | 'BottomToTop';
  animationX?: string;
  animationRotation?: string;
  animationDuration?: number;
  showOnPhone?: boolean;
}

export const SlidingImage: React.FC<SlidingImageProps> = ({
  image,
  imageAlt,
  imageStyle,
  animationDirection,
  animationX,
  animationRotation,
  animationDuration,
  showOnPhone,
}) => {
  const [isVisible, setIsVisible] = useState<boolean>(false);

  return (
    <VisibilitySensor
      partialVisibility
      onChange={(isVisibleNewValue: boolean) => {
        if (!isVisible) {
          setIsVisible(isVisibleNewValue);
        }
      }}
    >
      <Image
        src={image.default}
        alt={imageAlt}
        isVisible={isVisible}
        animationDirection={animationDirection}
        animationX={animationX}
        animationRotation={animationRotation}
        animationDuration={animationDuration}
        showOnPhone={showOnPhone}
        style={imageStyle}
      />
    </VisibilitySensor>
  );
};

const Image = styled.img<{
  isVisible: boolean;
  animationDirection: 'RightToLeft' | 'LeftToRight' | 'BottomToTop';
  animationX?: string;
  animationRotation?: string;
  animationDuration?: number;
  showOnPhone?: boolean;
}>`
  --animationX: ${(props) => (props.animationX ? props.animationX : '100px')};
  --negativeAnimationX: calc(-1 * var(--animationX));
  --animationRotation: ${(props) =>
    props.animationRotation ? props.animationRotation : '5deg'};
  --animationDuration: ${(props) =>
    props.animationDuration ? props.animationDuration + 's' : '0.7s'};

  /* ----------------------------------------------
 * Generated by Animista on 2020-12-6 20:56:11
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

  /**
 * ----------------------------------------
 * animation slide-bl
 * ----------------------------------------
 */
  @-webkit-keyframes slide-bl {
    0% {
      opacity: 0;
      -webkit-transform: translateY(0) translateX(0) rotate(0deg);
      transform: translateY(0) translateX(0) rotate(0deg);
    }
    25% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      -webkit-transform: translateY(var(--animationX))
        translateX(var(--negativeAnimationX)) rotate(var(--animationRotation));
      transform: translateY(var(--animationX))
        translateX(var(--negativeAnimationX)) rotate(var(--animationRotation));
    }
  }
  @keyframes slide-bl {
    0% {
      opacity: 0;
      -webkit-transform: translateY(0) translateX(0) rotate(0deg);
      transform: translateY(0) translateX(0) rotate(0deg);
    }
    25% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      -webkit-transform: translateY(var(--animationX))
        translateX(var(--negativeAnimationX)) rotate(var(--animationRotation));
      transform: translateY(var(--animationX))
        translateX(var(--negativeAnimationX)) rotate(var(--animationRotation));
    }
  }

  /* ----------------------------------------------
 * Generated by Animista on 2020-12-7 15:22:17
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

  /**
 * ----------------------------------------
 * animation slide-br
 * ----------------------------------------
 */
  @-webkit-keyframes slide-br {
    0% {
      opacity: 0;
      -webkit-transform: translateY(0) translateX(0) rotate(0deg);
      transform: translateY(0) translateX(0) rotate(0deg);
    }
    25% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      -webkit-transform: translateY(var(--animationX))
        translateX(var(--animationX)) rotate(var(--animationRotation));
      transform: translateY(var(--animationX)) translateX(var(--animationX))
        rotate(var(--animationRotation));
    }
  }
  @keyframes slide-br {
    0% {
      opacity: 0;
      -webkit-transform: translateY(0) translateX(0) rotate(0deg);
      transform: translateY(0) translateX(0) rotate(0deg);
    }
    25% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      -webkit-transform: translateY(var(--animationX))
        translateX(var(--animationX)) rotate(var(--animationRotation));
      transform: translateY(var(--animationX)) translateX(var(--animationX))
        rotate(var(--animationRotation));
    }
  }

  /* ----------------------------------------------
 * Generated by Animista on 2020-12-8 20:37:20
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

  /**
 * ----------------------------------------
 * animation slide-top
 * ----------------------------------------
 */
  @-webkit-keyframes slide-top {
    0% {
      opacity: 0;
      -webkit-transform: translateY(0);
      transform: translateY(0);
    }
    25% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      -webkit-transform: translateY(var(--negativeAnimationX));
      transform: translateY(var(--negativeAnimationX));
    }
  }
  @keyframes slide-top {
    0% {
      opacity: 0;
      -webkit-transform: translateY(0);
      transform: translateY(0);
    }
    25% {
      opacity: 0;
    }
    100% {
      opacity: 1;
      -webkit-transform: translateY(var(--negativeAnimationX));
      transform: translateY(var(--negativeAnimationX));
    }
  }

  ${(props) =>
    props.showOnPhone
      ? css`
          display: initial;
        `
      : css`
          display: none;
        `}
  opacity: 0;

  @media (min-width: 768px) {
    display: initial;
  }

  ${(props) =>
    props.isVisible &&
    props.animationDirection === 'RightToLeft' &&
    css`
      -webkit-animation: slide-bl var(--animationDuration)
        cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
      animation: slide-bl var(--animationDuration)
        cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
    `}

  ${(props) =>
    props.isVisible &&
    props.animationDirection === 'LeftToRight' &&
    css`
      -webkit-animation: slide-br var(--animationDuration)
        cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
      animation: slide-br var(--animationDuration)
        cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
    `}

    ${(props) =>
    props.isVisible &&
    props.animationDirection === 'BottomToTop' &&
    css`
      -webkit-animation: slide-top var(--animationDuration)
        cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
      animation: slide-top var(--animationDuration)
        cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
    `}
`;
